import streamlit as st
import pandas as pd
import joblib

# --- CONFIGURA√á√ÉO DA P√ÅGINA ---
# Este deve ser o PRIMEIRO comando do Streamlit no seu script.
st.set_page_config(page_title="Sentinela Industrial", page_icon="ü§ñ", layout="wide")


# --- Carregamento do Modelo ---
# O @st.cache_resource garante que o modelo seja carregado apenas uma vez.
@st.cache_resource
def load_model():
    """Fun√ß√£o para carregar o modelo salvo."""
    try:
        return joblib.load('modelo_manutencao_preditiva.pkl')
    except FileNotFoundError:
        return None

model = load_model()

# --- Interface do Usu√°rio (UI) ---
st.title('ü§ñ Sentinela Industrial: Manuten√ß√£o Preditiva com IA')
st.write("""
Esta aplica√ß√£o utiliza um modelo de Machine Learning para prever a probabilidade de falha de um equipamento industrial com base nos dados de seus sensores. Insira os valores abaixo para obter uma an√°lise em tempo real.
""")

# Verifica se o modelo foi carregado com sucesso
if model is None:
    st.error("Erro: Arquivo do modelo ('modelo_manutencao_preditiva.pkl') n√£o encontrado. Certifique-se de que o modelo foi salvo na mesma pasta que este script.")
else:
    # --- Se√ß√£o de Input do Usu√°rio ---
    st.sidebar.header('Insira os Dados dos Sensores:')

    def user_input_features():
        """Fun√ß√£o para coletar os inputs do usu√°rio na barra lateral."""
        air_temp = st.sidebar.slider('Temperatura do Ar [K]', 295.0, 305.0, 300.1, 0.1)
        process_temp = st.sidebar.slider('Temperatura do Processo [K]', 305.0, 315.0, 310.1, 0.1)
        rotational_speed = st.sidebar.slider('Velocidade Rotacional [rpm]', 1100, 3000, 1538)
        torque = st.sidebar.slider('Torque [Nm]', 3.0, 80.0, 39.5, 0.1)
        tool_wear = st.sidebar.slider('Desgaste da Ferramenta [min]', 0, 260, 107)

        data = {
            'Air temperature [K]': air_temp,
            'Process temperature [K]': process_temp,
            'Rotational speed [rpm]': rotational_speed,
            'Torque [Nm]': torque,
            'Tool wear [min]': tool_wear
        }
        features = pd.DataFrame(data, index=[0])
        return features

    input_df = user_input_features()

    # --- Exibi√ß√£o dos Dados de Entrada e Previs√£o ---
    st.subheader('Par√¢metros Atuais da M√°quina:')
    st.write(input_df)

    # Bot√£o para fazer a previs√£o
    if st.button('Analisar Condi√ß√£o da M√°quina'):
        # Fazer a previs√£o
        prediction = model.predict(input_df)
        prediction_proba = model.predict_proba(input_df)
        
        # Exibir o resultado
        st.subheader('Diagn√≥stico da IA:')

        if prediction[0] == 1:
            st.error('ALERTA: Falha iminente detectada!', icon="üö®")
            st.write(f"O modelo indica uma alta probabilidade de falha. A√ß√µes de manuten√ß√£o s√£o recomendadas.")
        else:
            st.success('Status: Opera√ß√£o Normal', icon="‚úÖ")
            st.write(f"O modelo indica que a m√°quina est√° operando em condi√ß√µes normais.")
        
        # Exibindo a probabilidade
        probabilidade_falha = prediction_proba[0][1] * 100
        # Usando st.progress para uma barra visual
        st.progress(int(probabilidade_falha))
        st.write(f"**Probabilidade de Falha: {probabilidade_falha:.2f}%**")